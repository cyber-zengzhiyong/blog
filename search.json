[{"title":"Python学习笔记","url":"/2025/06/01/Python学习笔记/","content":"Python学习笔记目录 Python基础语法 行与缩进 多行语句 标识符与保留字 注释 输入与输出 运算符 三元操作符 多重赋值 * 和 ** 运算符的特殊使用 独一无二的变量 id Python基本数据类型 整型 不同进制整数的表示 数字分隔符 整型常量池 浮点型 基本操作 浮点数转分数 浮点数取整 浮点数四舍五入 decimal 模块 布尔型 布尔值的判断 特殊值的布尔值 字符串 字符串的定义与操作 字符串索引与切片 转义字符 字符串前缀 字符串拼接 字符串基本函数 字符串查找与替换 str.maketrans() 和 str.translate() 字符串比较与驻留 字符串编译时拼接 列表 列表的创建 列表推导式 列表元素操作 列表排序 数值列表与统计函数 切片 列表拷贝 列表反转 元组 元组与列表的区别 元组的创建与操作 元组内置函数 字典 初始化方式创建字典 字典的操作 字典与列表的嵌套 字典排序 集合 集合的特性与操作 collections 模块 命名元组 (namedtuple) 计数器 (Counter) 双向队列 (deque) 有序字典 (OrderedDict) 默认字典 (defaultdict) Python函数 函数的参数 必选参数 默认参数 可变参数 关键字参数 参数组合 函数的返回值 Python的作用域 Python的循环 迭代器 内置函数 globals() 和 locals() 函数 eval() 函数 定义函数与调用函数的顺序 正确定义与使用参数 模块 pip 使用指南 模块的引入 自定义模块 内置模块 reload() 函数 递归函数 匿名函数（lambda 函数） Python内置的高阶函数 面向对象 类的声明 类的定义 类的变量（类的属性） 类的方法 关于 self 绑定方法与非绑定方法 类的实例化 @staticmethod 和 @classmethod 类的继承 父类与子类 继承 super() 函数 对象的创建 面向对象相关的内建函数 爬虫 爬虫简介 urllib 库的使用 urllib.request 模块 urlopen() 函数 HttpRequest 类的函数 urlretrieve() 函数 请求对象定制 HTTP与HTTPS urllib.parse 模块 HTTP请求 AJAX介绍 Handler处理器 代理服务器 解析 XPath HTML与XML lxml 库 JSONPath Selenium库使用 验证码识别 Requests库 会话保持 session与cookie 实战案例分析 正文1. Python基础语法行与缩进Python使用缩进来表示代码块，缩进的空格数必须相同。例如： 多行语句Python的代码通常一行一条语句，语句后可加分号;。一行写多条语句时用;隔开。长语句可用\\换行，或在括号内自动换行。例如： 标识符与保留字标识符用于命名变量、函数等，需遵循特定规则。保留字是 Python 内置的关键字，不能用作标识符。例如： 可使用 keyword 模块查看保留字： 注释单行注释以 # 开头，多行注释可用多个 # 或一对 '''&#x2F;\"\"\"。例如： 输入与输出print() 函数用于输出，可输出多个内容，内容间自动加空格。% 操作符用于格式化输出。例如： input() 函数用于获取用户输入，返回值为字符串。可使用类型转换函数将其转为其他类型。例如： 运算符Python 提供多种运算符，包括算术、比较、赋值、逻辑、位、成员和身份运算符。例如： 三元操作符三元操作符的基本格式为 result = x if condition else y。例如： 多重赋值可同时为多个变量赋值，也可交换变量值。例如： * 和 ** 运算符的特殊使用* 用于乘法和重复序列元素。** 用于幂运算和将字典元素作为关键字参数传递给函数。例如： 独一无二的变量 id每个变量都有一个独一无二的 id，表示变量在内存中的地址。例如： 2. Python基本数据类型整型Python 的整型可以表示正数、负数和零，支持多种进制表示。例如： 可使用 bin(), oct(), hex() 函数进行进制转换。 浮点型浮点型用于表示小数或科学计数法表示的数。可使用 float() 将字符串转为浮点数。例如： 布尔型布尔型只有两个值：True 和 False。例如： 字符串字符串是字符序列，支持索引和切片操作。例如： 字符串支持多种操作，如拼接、格式化、查找等。例如： 列表列表是有序的元素集合，支持多种操作。例如： 元组元组与列表类似，但不可变。例如： 字典字典是键值对的集合，支持多种操作。例如： 集合集合是无序的元素集合，支持多种操作。例如： collections 模块collections 模块提供了多种数据结构，如 namedtuple、Counter、deque、OrderedDict、defaultdict 等。例如： 3. Python函数函数的参数函数可以有多种参数类型，包括必选参数、默认参数、可变参数和关键字参数。例如： 函数的返回值函数可以返回值或函数。例如： Python的作用域Python 的作用域规则决定了变量的可见性。例如： Python的循环for 循环和 while 循环可用于迭代序列或执行重复操作。例如： 迭代器迭代器用于遍历序列元素。例如： 内置函数Python 提供了许多内置函数，如 abs(), divmod(), max(), min(), sum(), round() 等。例如： globals() 和 locals() 函数globals() 返回当前模块的全局变量字典，locals() 返回当前函数的局部变量字典。例如： Python 复制 eval() 函数eval() 函数用于动态执行 Python 表达式。例如： 定义函数与调用函数的顺序函数必须先定义后调用。例如： 正确定义与使用参数调用函数时，参数数量和类型必须匹配。例如： 4. 模块pip 使用指南pip 是 Python 的包管理工具。常用命令包括： 模块的引入使用 import 关键字引入模块。例如： 自定义模块创建 .py 文件即可定义模块。例如： 在其他文件中引入： 内置模块Python 提供了许多内置模块，如 os, sys, json, logging, time, datetime, hashlib, random 等。例如： reload() 函数reload() 函数用于重新加载模块。例如： 递归函数递归函数是调用自身的函数。例如，汉诺塔问题的递归解决方案： 匿名函数（lambda 函数）lambda 函数是匿名函数，用于定义简单函数。例如： Python内置的高阶函数高阶函数如 map(), filter(), reduce() 等。例如： 5. 面向对象类的声明使用 class 关键字声明类。例如： 类的定义类中可定义变量和方法。例如： 类的变量（类的属性）类变量是所有实例共享的变量，实例变量是每个实例独有的变量。例如： 类的方法类的方法是定义在类中的函数。例如： 关于 selfself 是实例对象的引用，用于访问实例变量和方法。例如： 绑定方法与非绑定方法绑定方法是与实例绑定的方法，非绑定方法是与类绑定的方法。例如： 类的实例化使用类名加括号创建实例。例如： @staticmethod 和 @classmethod@staticmethod 定义静态方法，@classmethod 定义类方法。例如： 类的继承子类继承父类的属性和方法。例如： 父类与子类父类是基类，子类是派生类。子类可重写父类的方法。例如： 继承Python 支持多继承。例如： super() 函数super() 函数用于调用父类的方法。例如： 对象的创建对象创建时，__new__() 方法用于创建对象，__init__() 方法用于初始化对象。例如： 面向对象相关的内建函数内建函数如 issubclass(), isinstance(), hasattr(), getattr(), setattr(), delattr(), dir(), super(), vars() 等。例如： 6. 爬虫爬虫简介爬虫是一种自动抓取网页信息的程序。常见的爬虫类型包括通用爬虫、聚焦爬虫、增量式爬虫和深层爬虫。 urllib 库的使用urllib 是 Python 的一个网络爬虫库，包含多个模块。 urllib.request 模块urllib.request 模块用于打开和读取 URL。例如： urlopen() 函数urlopen() 函数用于打开 URL。例如： HttpRequest 类的函数HttpRequest 类用于创建请求对象。例如： urlretrieve() 函数urlretrieve() 函数用于下载文件。例如： 请求对象定制可定制请求头以模拟浏览器访问。例如： HTTP与HTTPSHTTP 是明文传输协议，HTTPS 是加密传输协议。HTTPS 更安全。 urllib.parse 模块urllib.parse 模块用于解析 URL。例如： HTTP请求HTTP 请求包含请求方法、请求网址、请求头和请求体。常见的请求方法有 GET 和 POST。 GET请求与POST请求GET 请求用于获取数据，POST 请求用于提交数据。例如： AJAX介绍AJAX 是一种创建交互式网页应用的技术，可在不刷新页面的情况下与服务器交换数据。 Handler处理器Handler 处理器用于处理 URL 请求。例如，使用代理处理器： 代理服务器代理服务器用于转发网络请求，可隐藏客户端 IP、突破访问限制等。 解析解析网页内容可使用 XPath 或正则表达式等技术。 XPathXPath 用于在 XML 或 HTML 文档中查找信息。例如： HTML与XMLHTML 用于创建网页，XML 用于存储和传输数据。 lxml 库lxml 库用于解析 HTML 和 XML 文档。例如： JSONPathJSONPath 用于提取 JSON 数据。例如： Selenium库使用Selenium 用于自动化测试和爬虫，可模拟浏览器操作。 浏览器驱动程序需下载对应浏览器的驱动程序。例如，Chrome 浏览器需下载 chromedriver。 安装 Selenium 编写测试代码 Headless模式Headless 模式用于无头浏览器操作。例如： 元素定位的方法Selenium 提供多种元素定位方法，如通过 ID、名称、类名、标签名、链接文本、部分链接文本、XPath、CSS 选择器等。例如： 验证码识别验证码识别可使用打码平台或 OCR 库。 Python的OCR库pytesseract 和 ddddocr 是常用的 OCR 库。例如，使用 pytesseract： Requests库Requests 库是 Python 的一个 HTTP 客户端库，用于发送 HTTP 请求。 与 urllib 库的区别Requests 库的 API 更简单易用，支持连接池、会话保持等功能。 会话保持使用 Session 对象保持会话。例如： session与cookieSession 对象可自动管理 cookie，保持会话状态。 实战案例分析例如，古诗文网登录爬虫：","date":"2025-06-01","categories":["python"]},{"title":"四级备考攻略","url":"/2025/05/06/四级/","content":"笔试科目与分值（总分710分） 部分 测试内容 题型 分值比例 考试时间 写作 短文写作 提纲&#x2F;图表作文等 15% 30分钟 听力 短篇新闻（3篇） 单选题 7% 25分钟 长对话（2篇） 单选题 8% 听力篇章（3篇） 单选题 20% 阅读 词汇理解（选词填空） 选词填空 5% 40分钟 长篇阅读（匹配题） 段落匹配 10% 仔细阅读（2篇） 单选题 20% 翻译 汉译英段落 段落翻译 15% 30分钟 125分钟 第一阶段：基础巩固（第1-15天）目标：夯实词汇与语法基础，熟悉考试结构 词汇积累 每日背诵80-100个高频核心词汇，结合词根词缀记忆法，优先掌握四六级高频词表（如《四级词汇闪过》） 利用碎片时间通过APP（如墨墨背单词）复习，重点标记易混淆词汇（如形近词、近义词）。 语法补漏 系统梳理时态、从句、虚拟语气、非谓语动词等核心语法，结合真题例句理解应用初步熟悉题型 完成1套真题（如2024年12月卷），记录各题型得分，明确薄弱项 第二阶段：专项突破（第16-35天）目标：针对听力、阅读、写作、翻译分项强化 听力（每日1小时） 精听训练：每天听1套真题听力，第一遍盲听做题，第二遍对照原文逐句跟读，标记连读、弱读等语音现象 技巧应用：关注首尾句、转折词（but&#x2F;however）、数字、列举（first, second），答案多与同义替换相关 阅读（每日1小时） 题型专项 选词填空：通过词性、上下文逻辑快速排除错误选项（建议6分钟内完成） 长篇阅读：练习扫读定位关键词，优先匹配段落首尾句（11分钟内完成） 仔细阅读：分析题干定位原文，避免过度推理，答案多为主旨概括或细节重现 写作与翻译（隔日1小时） 写作模板：背诵3-4套万能模板（如现象分析、观点对比），积累衔接词（Furthermore, Nevertheless）和高级句式（倒装句、强调句） 翻译训练：每日练习1段中国文化主题翻译（如传统节日、科技成就），积累 特色词汇（例：元宵节→Lantern Festival） 第三阶段：模拟强化（第36-45天）目标：全真模拟，提升应试能力 真题实战： 每周完成3套真题（如2018-2024年卷），严格按考试时间（9:00-11:20）模拟，使用答题卡涂写 重点分析错题，总结高频陷阱（如听力干扰项、阅读过度引申）。 时间分配优化： 写作：25分钟完成（预留5分钟检查语法） 听力：利用题干预读时间划关键词，答案边听边涂卡 阅读：按“仔细阅读→长篇阅读→选词填空”顺序答题，优先保正确率 第四阶段：冲刺调整（第46-50天）目标：查漏补缺，稳定心态 高频复盘： 重做错题本中易错题，强化薄弱题型（如听力新闻题、翻译复杂句型）。 快速过一遍高频词表，确保核心词汇无遗漏 模考与调整： 完成1套预测卷，保持题感，适应新题趋势。 调整生物钟，保证考试时段（上午）头脑清醒。 心态管理： 通过冥想、轻音乐缓解焦虑，避免熬夜（考前3天每天睡眠≥7小时） 备考工具推荐 词汇：《四级词汇闪过》、墨墨背单词 真题：星火英语《四级真题详解+标准预测》 听力：每日英语听力APP（精听真题录音） 写作翻译：China Daily双语新闻、真题范文 通过以上规划，结合每日4-6小时高效学习，可系统覆盖四级考点。重点需保持真题训练强度，避免陷入“只背不练”的误区。最后10天减少新题摄入，专注复盘与巩固。","date":"2025-05-06","categories":["英语"]},{"title":"Python基础语法","url":"/2025/05/05/Python基础语法/","content":"Python基础语法标识符 第一个字符必须以字母（a-z, A-Z）或下划线 _ 。 标识符的其他的部分由字母、数字和下划线组成。 标识符对大小写敏感，count 和 Count 是不同的标识符。 标识符对长度无硬性限制，但建议保持简洁（一般不超过 20 个字符）。 禁止使用保留关键字，如 if、for、class 等不能作为标识符。 保留字 类别 关键字 说明 逻辑值 True 布尔真值 False 布尔假值 None 表示空值或无值 逻辑运算 and 逻辑与运算 or 逻辑或运算 not 逻辑非运算 条件控制 if 条件判断语句 elif 否则如果（else if 的缩写） else 否则分支 循环控制 for 迭代循环 while 条件循环 break 跳出循环 continue 跳过当前循环的剩余部分，进入下一次迭代 异常处理 try 尝试执行代码块 except 捕获异常 finally 无论是否发生异常都会执行的代码块 raise 抛出异常 函数定义 def 定义函数 return 从函数返回值 lambda 创建匿名函数 类与对象 class 定义类 del 删除对象引用 模块导入 import 导入模块 from 从模块导入特定部分 as 为导入的模块或对象创建别名 作用域 global 声明全局变量 nonlocal 声明非局部变量（用于嵌套函数） 异步编程 async 声明异步函数 await 等待异步操作完成 其他 assert 断言，用于测试条件是否为真 in 检查成员关系 is 检查对象身份（是否是同一个对象） pass 空语句，用于占位 with 上下文管理器，用于资源管理 yield 从生成器函数返回值 注释Python中单行注释以 # 开头，实例如下： 多行注释可以用多个 # 号，还有 ‘’’ 和 “””： 缩进python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。缩进的空格数是可变的，以下代码最后一行语句缩进数的空格数不一致，会导致运行错误： 以上程序由于缩进不一致，执行后会出现类似以下错误： 多行语句Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 **** 来实现多行语句，例如： 数字(Number)类型python中数字有四种类型：整数、布尔型、浮点数和复数。 int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。 bool (布尔), 如 True。 float (浮点数), 如 1.23、3E-2 complex (复数) - 复数由实部和虚部组成，形式为 a + bj，其中 a 是实部，b 是虚部，j 表示虚数单位。如 1 + 2j、 1.1 + 2.2j 字符串(String) Python 中单引号 ‘ 和双引号 “ 使用完全相同。 使用三引号(‘’’ 或 “””)可以指定一个多行字符串。 转义符 \\。 反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。 如 r”this is a line with \\n” 则 \\n 会显示，并不是换行。 按字面意义级联字符串，如 “this “ “is “ “string” 会被自动转换为 this is string。 字符串可以用 + 运算符连接在一起，用 ***** 运算符重复。 Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。 Python 中的字符串不能改变。 Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。 字符串切片 str[start:end]，其中 start（包含）是切片开始的索引，end（不包含）是切片结束的索引。 字符串的切片可以加上步长参数 step，语法格式如下：str[start:end:step] 实例(Python 3.0+) 这里的 r 指 raw，即 raw string，会自动将反斜杠转义，例如：","date":"2025-05-05","categories":["python"]},{"title":"文章分类","url":"/categories/index.html","content":"","date":"2025-05-04"}]